

(let (' nil) (' (' nil))) $
(let (' list) (' (: self (: x (: y
    (if (= y nil) (x
        (self self (:: x y))))))))) $

(let (' [) (' (list list nil))) $
(let (' ]) (' nil)) $
(let (' last) (' (: z (1: z)))) $
(let (' init) (' (: z (0: z)))) $ 
(let (' head) (' (:= (head_ (: self (: z
    (if (= (0: z) nil) ((1: z)
        (self self (init z))))))) (head_ head_)))) $
(let (' tail) (' (:= (tail_ (: self (: z
    (if (= (0: z) nil) (nil
        (:: (self self (0: z)) (1: z))))))) (tail_ tail_)))) $
(let (' map) (' (:= (next (: self (: z (: f
    (if (= z nil) (nil
        (:: (self self (0: z) f) (f (1: z))))))))) (next next)))) $
(let (' foldr) (' (:= (fold (: self (: z (: a (: f
    (if (= z nil) (a
        (self self (init z) (f a (last z)) f)))))))) (fold fold)))) $
(let (' #) (' (: z (foldr z 0 (: a (: x (+ a 1))))))) $
(let (' reverse) (' (: z (foldr z nil (: a (: x (:: a x))))))) $
(let (' foldl) (' (: z (foldr (reverse z)))))























